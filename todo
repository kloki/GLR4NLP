TableGeneration
-bugged


Parser
-implement syncing
-need handle empty goto entries














Algorithm 

until todostate is empty
      
      if start:
      	 popfirst leftmost chain
      	 -Add state for all non terminals from gotos,state name are non terminals add state
	 -add shift state from terminal state name is terminal
      if rightsybling = $ and state  = "S" 
         add acc to $
      
      if rightsybling = $ 
               apply reduce too parent from lookahead terminal. new state is current state with reduce aplied thus v det n will turn in to v VP

      if rightsybling = terminal
              shift to new state, state is current state + terminals
      if right sybling = nonterminal:
          popleftmost chain
	  ass start
      	 
     



            if currentState=="start":
                currentChain=tree.getTopChain()
                for node in currentChain:
                    #check if exists
                    if node.symbol not in self.stateLabels.keys():
                        self.createState(node.symbol)
                    state2chain[node.symbol]=currentChain
                    if node.symbol[0].isupper():
                        self.addAction(self.gotos,state,node.symbol,self.stateLabels[node.symbol])    
                    else:
                        self.addAction(self.actions,state,node.symbol,("s"+str(self.stateLabels[node.symbol])))
                    todo.append(node.symbol)
            else:
                #get all the siblings belonging to this state and its corresponding chain, Note siblings by definition don't belong to the current state
                siblings=[]
                currentNodes=[]
                symbol=currentState.split()[-1]
                
                for node in state2chain[currentState]:
                    if node.symbol==symbol:
                        siblings.append(tree.getRightSibling(node))
                        currentNodes.append(node)
              #get look ahead
                lookahead=tree.getLookahead(state2chain[currentState][-1])
                for i in xrange(len(siblings)):
                    sibling=siblings[i]
                    currentNode=currentNodes[i]
                    if sibling=="$":
                        if currentState=="TOP":
                            self.addAction(self.actions,state,"$","accept")
                        else:
                            index=self.getIndex(tree.getRule(currentNode.parent))
                            self.addAction(self.actions,state,tree.getLookaheadNode(currentNode),("r"+str(index)))
                    elif sibling.symbol[0].isupper():
                        #get the chain with the current node as top
                        currentChain=tree.getLeftMostChainHead(sibling)
                        for node in currentChain:
                            if node.symbol[0].isupper():
                                newstate=currentState+" "+node.symbol
                                if newstate not in self.stateLabels.keys():
                                    self.createState(newstate)
                                state2chain[newstate]=currentChain
                                self.addAction(self.gotos,state,node.symbol,self.stateLabels[newstate])    
                                todo.append(newstate)
                            else:
                                if node.symbol not in self.stateLabels.keys():
                                    self.createState(node.symbol) 
                                state2chain[node.symbol]=currentChain
                                self.addAction(self.actions,state,node.symbol,("s"+str(self.stateLabels[node.symbol])))
                                todo.append(node.symbol)
                    else:#sybling is terminal, the same as sybling is lookahead. 
                        newstate=currentState+" "+sibling.symbol
                        if newstate not in self.stateLabels.keys():
                            self.createState(newstate)
                            #because were dealing with terminals we can easily determine the new chain, the next one
                        state2chain[newstate]=tree.getNextChain(state2chain[currentState])
                        self.addAction(self.actions,state,sibling.symbol,("s"+str(self.stateLabels[newstate])))
                        todo.append(newstate)
    